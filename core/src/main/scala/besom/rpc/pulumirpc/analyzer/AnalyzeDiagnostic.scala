// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package pulumirpc.analyzer

/** @param policyName
  *   Name of the violated policy.
  * @param policyPackName
  *   Name of the policy pack the policy is in.
  * @param policyPackVersion
  *   Version of the policy pack.
  * @param description
  *   Description of policy rule. e.g., "encryption enabled."
  * @param message
  *   Message to display on policy violation, e.g., remediation steps.
  * @param tags
  *   Keywords/terms to associate with a policy, e.g., "cost".
  * @param enforcementLevel
  *   Severity of the policy violation.
  * @param urn
  *   URN of the resource that violates the policy.
  */
@SerialVersionUID(0L)
final case class AnalyzeDiagnostic(
    policyName: _root_.scala.Predef.String = "",
    policyPackName: _root_.scala.Predef.String = "",
    policyPackVersion: _root_.scala.Predef.String = "",
    description: _root_.scala.Predef.String = "",
    message: _root_.scala.Predef.String = "",
    tags: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    enforcementLevel: pulumirpc.analyzer.EnforcementLevel = pulumirpc.analyzer.EnforcementLevel.ADVISORY,
    urn: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AnalyzeDiagnostic] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = policyName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = policyPackName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = policyPackVersion
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = description
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      
      {
        val __value = message
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      tags.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
      }
      
      {
        val __value = enforcementLevel.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(7, __value)
        }
      };
      
      {
        val __value = urn
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = policyName
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = policyPackName
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = policyPackVersion
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = description
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = message
        if (!__v.isEmpty) {
          _output__.writeString(5, __v)
        }
      };
      tags.foreach { __v =>
        val __m = __v
        _output__.writeString(6, __m)
      };
      {
        val __v = enforcementLevel.value
        if (__v != 0) {
          _output__.writeEnum(7, __v)
        }
      };
      {
        val __v = urn
        if (!__v.isEmpty) {
          _output__.writeString(8, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withPolicyName(__v: _root_.scala.Predef.String): AnalyzeDiagnostic = copy(policyName = __v)
    def withPolicyPackName(__v: _root_.scala.Predef.String): AnalyzeDiagnostic = copy(policyPackName = __v)
    def withPolicyPackVersion(__v: _root_.scala.Predef.String): AnalyzeDiagnostic = copy(policyPackVersion = __v)
    def withDescription(__v: _root_.scala.Predef.String): AnalyzeDiagnostic = copy(description = __v)
    def withMessage(__v: _root_.scala.Predef.String): AnalyzeDiagnostic = copy(message = __v)
    def clearTags = copy(tags = _root_.scala.Seq.empty)
    def addTags(__vs: _root_.scala.Predef.String *): AnalyzeDiagnostic = addAllTags(__vs)
    def addAllTags(__vs: Iterable[_root_.scala.Predef.String]): AnalyzeDiagnostic = copy(tags = tags ++ __vs)
    def withTags(__v: _root_.scala.Seq[_root_.scala.Predef.String]): AnalyzeDiagnostic = copy(tags = __v)
    def withEnforcementLevel(__v: pulumirpc.analyzer.EnforcementLevel): AnalyzeDiagnostic = copy(enforcementLevel = __v)
    def withUrn(__v: _root_.scala.Predef.String): AnalyzeDiagnostic = copy(urn = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = policyName
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = policyPackName
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = policyPackVersion
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = description
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = message
          if (__t != "") __t else null
        }
        case 6 => tags
        case 7 => {
          val __t = enforcementLevel.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 8 => {
          val __t = urn
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(policyName)
        case 2 => _root_.scalapb.descriptors.PString(policyPackName)
        case 3 => _root_.scalapb.descriptors.PString(policyPackVersion)
        case 4 => _root_.scalapb.descriptors.PString(description)
        case 5 => _root_.scalapb.descriptors.PString(message)
        case 6 => _root_.scalapb.descriptors.PRepeated(tags.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 7 => _root_.scalapb.descriptors.PEnum(enforcementLevel.scalaValueDescriptor)
        case 8 => _root_.scalapb.descriptors.PString(urn)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: pulumirpc.analyzer.AnalyzeDiagnostic.type = pulumirpc.analyzer.AnalyzeDiagnostic
    // @@protoc_insertion_point(GeneratedMessage[pulumirpc.AnalyzeDiagnostic])
}

object AnalyzeDiagnostic extends scalapb.GeneratedMessageCompanion[pulumirpc.analyzer.AnalyzeDiagnostic] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[pulumirpc.analyzer.AnalyzeDiagnostic] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): pulumirpc.analyzer.AnalyzeDiagnostic = {
    var __policyName: _root_.scala.Predef.String = ""
    var __policyPackName: _root_.scala.Predef.String = ""
    var __policyPackVersion: _root_.scala.Predef.String = ""
    var __description: _root_.scala.Predef.String = ""
    var __message: _root_.scala.Predef.String = ""
    val __tags: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var __enforcementLevel: pulumirpc.analyzer.EnforcementLevel = pulumirpc.analyzer.EnforcementLevel.ADVISORY
    var __urn: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __policyName = _input__.readStringRequireUtf8()
        case 18 =>
          __policyPackName = _input__.readStringRequireUtf8()
        case 26 =>
          __policyPackVersion = _input__.readStringRequireUtf8()
        case 34 =>
          __description = _input__.readStringRequireUtf8()
        case 42 =>
          __message = _input__.readStringRequireUtf8()
        case 50 =>
          __tags += _input__.readStringRequireUtf8()
        case 56 =>
          __enforcementLevel = pulumirpc.analyzer.EnforcementLevel.fromValue(_input__.readEnum())
        case 66 =>
          __urn = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    pulumirpc.analyzer.AnalyzeDiagnostic(
        policyName = __policyName,
        policyPackName = __policyPackName,
        policyPackVersion = __policyPackVersion,
        description = __description,
        message = __message,
        tags = __tags.result(),
        enforcementLevel = __enforcementLevel,
        urn = __urn,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[pulumirpc.analyzer.AnalyzeDiagnostic] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      pulumirpc.analyzer.AnalyzeDiagnostic(
        policyName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        policyPackName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        policyPackVersion = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        description = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        message = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        tags = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        enforcementLevel = pulumirpc.analyzer.EnforcementLevel.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(pulumirpc.analyzer.EnforcementLevel.ADVISORY.scalaValueDescriptor).number),
        urn = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AnalyzerProto.javaDescriptor.getMessageTypes().get(7)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = AnalyzerProto.scalaDescriptor.messages(7)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 7 => pulumirpc.analyzer.EnforcementLevel
    }
  }
  lazy val defaultInstance = pulumirpc.analyzer.AnalyzeDiagnostic(
    policyName = "",
    policyPackName = "",
    policyPackVersion = "",
    description = "",
    message = "",
    tags = _root_.scala.Seq.empty,
    enforcementLevel = pulumirpc.analyzer.EnforcementLevel.ADVISORY,
    urn = ""
  )
  implicit class AnalyzeDiagnosticLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, pulumirpc.analyzer.AnalyzeDiagnostic]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, pulumirpc.analyzer.AnalyzeDiagnostic](_l) {
    def policyName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.policyName)((c_, f_) => c_.copy(policyName = f_))
    def policyPackName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.policyPackName)((c_, f_) => c_.copy(policyPackName = f_))
    def policyPackVersion: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.policyPackVersion)((c_, f_) => c_.copy(policyPackVersion = f_))
    def description: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.description)((c_, f_) => c_.copy(description = f_))
    def message: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.message)((c_, f_) => c_.copy(message = f_))
    def tags: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.tags)((c_, f_) => c_.copy(tags = f_))
    def enforcementLevel: _root_.scalapb.lenses.Lens[UpperPB, pulumirpc.analyzer.EnforcementLevel] = field(_.enforcementLevel)((c_, f_) => c_.copy(enforcementLevel = f_))
    def urn: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.urn)((c_, f_) => c_.copy(urn = f_))
  }
  final val POLICYNAME_FIELD_NUMBER = 1
  final val POLICYPACKNAME_FIELD_NUMBER = 2
  final val POLICYPACKVERSION_FIELD_NUMBER = 3
  final val DESCRIPTION_FIELD_NUMBER = 4
  final val MESSAGE_FIELD_NUMBER = 5
  final val TAGS_FIELD_NUMBER = 6
  final val ENFORCEMENTLEVEL_FIELD_NUMBER = 7
  final val URN_FIELD_NUMBER = 8
  def of(
    policyName: _root_.scala.Predef.String,
    policyPackName: _root_.scala.Predef.String,
    policyPackVersion: _root_.scala.Predef.String,
    description: _root_.scala.Predef.String,
    message: _root_.scala.Predef.String,
    tags: _root_.scala.Seq[_root_.scala.Predef.String],
    enforcementLevel: pulumirpc.analyzer.EnforcementLevel,
    urn: _root_.scala.Predef.String
  ): _root_.pulumirpc.analyzer.AnalyzeDiagnostic = _root_.pulumirpc.analyzer.AnalyzeDiagnostic(
    policyName,
    policyPackName,
    policyPackVersion,
    description,
    message,
    tags,
    enforcementLevel,
    urn
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[pulumirpc.AnalyzeDiagnostic])
}
