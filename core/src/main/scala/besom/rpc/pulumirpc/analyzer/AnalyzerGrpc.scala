// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package pulumirpc.analyzer


object AnalyzerGrpc {
  val METHOD_ANALYZE: _root_.io.grpc.MethodDescriptor[pulumirpc.analyzer.AnalyzeRequest, pulumirpc.analyzer.AnalyzeResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("pulumirpc.Analyzer", "Analyze"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.analyzer.AnalyzeRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.analyzer.AnalyzeResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(pulumirpc.analyzer.AnalyzerProto.javaDescriptor.getServices().get(0).getMethods().get(0)))
      .build()
  
  val METHOD_ANALYZE_STACK: _root_.io.grpc.MethodDescriptor[pulumirpc.analyzer.AnalyzeStackRequest, pulumirpc.analyzer.AnalyzeResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("pulumirpc.Analyzer", "AnalyzeStack"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.analyzer.AnalyzeStackRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.analyzer.AnalyzeResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(pulumirpc.analyzer.AnalyzerProto.javaDescriptor.getServices().get(0).getMethods().get(1)))
      .build()
  
  val METHOD_GET_ANALYZER_INFO: _root_.io.grpc.MethodDescriptor[com.google.protobuf.empty.Empty, pulumirpc.analyzer.AnalyzerInfo] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("pulumirpc.Analyzer", "GetAnalyzerInfo"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.google.protobuf.empty.Empty])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.analyzer.AnalyzerInfo])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(pulumirpc.analyzer.AnalyzerProto.javaDescriptor.getServices().get(0).getMethods().get(2)))
      .build()
  
  val METHOD_GET_PLUGIN_INFO: _root_.io.grpc.MethodDescriptor[com.google.protobuf.empty.Empty, pulumirpc.plugin.PluginInfo] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("pulumirpc.Analyzer", "GetPluginInfo"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.google.protobuf.empty.Empty])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.plugin.PluginInfo])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(pulumirpc.analyzer.AnalyzerProto.javaDescriptor.getServices().get(0).getMethods().get(3)))
      .build()
  
  val METHOD_CONFIGURE: _root_.io.grpc.MethodDescriptor[pulumirpc.analyzer.ConfigureAnalyzerRequest, com.google.protobuf.empty.Empty] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("pulumirpc.Analyzer", "Configure"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[pulumirpc.analyzer.ConfigureAnalyzerRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.google.protobuf.empty.Empty])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(pulumirpc.analyzer.AnalyzerProto.javaDescriptor.getServices().get(0).getMethods().get(4)))
      .build()
  
  val SERVICE: _root_.io.grpc.ServiceDescriptor =
    _root_.io.grpc.ServiceDescriptor.newBuilder("pulumirpc.Analyzer")
      .setSchemaDescriptor(new _root_.scalapb.grpc.ConcreteProtoFileDescriptorSupplier(pulumirpc.analyzer.AnalyzerProto.javaDescriptor))
      .addMethod(METHOD_ANALYZE)
      .addMethod(METHOD_ANALYZE_STACK)
      .addMethod(METHOD_GET_ANALYZER_INFO)
      .addMethod(METHOD_GET_PLUGIN_INFO)
      .addMethod(METHOD_CONFIGURE)
      .build()
  
  /** Analyzer provides a pluggable interface for checking resource definitions against some number of
    * resource policies. It is intentionally open-ended, allowing for implementations that check
    * everything from raw resource definitions to entire projects/stacks/snapshots for arbitrary
    * issues -- style, policy, correctness, security, and so on.
    */
  trait Analyzer extends _root_.scalapb.grpc.AbstractService {
    override def serviceCompanion = Analyzer
    /** Analyze analyzes a single resource object, and returns any errors that it finds.
      * Called with the "inputs" to the resource, before it is updated.
      */
    def analyze(request: pulumirpc.analyzer.AnalyzeRequest): scala.concurrent.Future[pulumirpc.analyzer.AnalyzeResponse]
    /** AnalyzeStack analyzes all resources within a stack, at the end of a successful
      * preview or update. The provided resources are the "outputs", after any mutations
      * have taken place.
      */
    def analyzeStack(request: pulumirpc.analyzer.AnalyzeStackRequest): scala.concurrent.Future[pulumirpc.analyzer.AnalyzeResponse]
    /** GetAnalyzerInfo returns metadata about the analyzer (e.g., list of policies contained).
      */
    def getAnalyzerInfo(request: com.google.protobuf.empty.Empty): scala.concurrent.Future[pulumirpc.analyzer.AnalyzerInfo]
    /** GetPluginInfo returns generic information about this plugin, like its version.
      */
    def getPluginInfo(request: com.google.protobuf.empty.Empty): scala.concurrent.Future[pulumirpc.plugin.PluginInfo]
    /** Configure configures the analyzer, passing configuration properties for each policy.
      */
    def configure(request: pulumirpc.analyzer.ConfigureAnalyzerRequest): scala.concurrent.Future[com.google.protobuf.empty.Empty]
  }
  
  object Analyzer extends _root_.scalapb.grpc.ServiceCompanion[Analyzer] {
    implicit def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[Analyzer] = this
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = pulumirpc.analyzer.AnalyzerProto.javaDescriptor.getServices().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.ServiceDescriptor = pulumirpc.analyzer.AnalyzerProto.scalaDescriptor.services(0)
    def bindService(serviceImpl: Analyzer, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition =
      _root_.io.grpc.ServerServiceDefinition.builder(SERVICE)
      .addMethod(
        METHOD_ANALYZE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[pulumirpc.analyzer.AnalyzeRequest, pulumirpc.analyzer.AnalyzeResponse] {
          override def invoke(request: pulumirpc.analyzer.AnalyzeRequest, observer: _root_.io.grpc.stub.StreamObserver[pulumirpc.analyzer.AnalyzeResponse]): _root_.scala.Unit =
            serviceImpl.analyze(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_ANALYZE_STACK,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[pulumirpc.analyzer.AnalyzeStackRequest, pulumirpc.analyzer.AnalyzeResponse] {
          override def invoke(request: pulumirpc.analyzer.AnalyzeStackRequest, observer: _root_.io.grpc.stub.StreamObserver[pulumirpc.analyzer.AnalyzeResponse]): _root_.scala.Unit =
            serviceImpl.analyzeStack(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_GET_ANALYZER_INFO,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[com.google.protobuf.empty.Empty, pulumirpc.analyzer.AnalyzerInfo] {
          override def invoke(request: com.google.protobuf.empty.Empty, observer: _root_.io.grpc.stub.StreamObserver[pulumirpc.analyzer.AnalyzerInfo]): _root_.scala.Unit =
            serviceImpl.getAnalyzerInfo(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_GET_PLUGIN_INFO,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[com.google.protobuf.empty.Empty, pulumirpc.plugin.PluginInfo] {
          override def invoke(request: com.google.protobuf.empty.Empty, observer: _root_.io.grpc.stub.StreamObserver[pulumirpc.plugin.PluginInfo]): _root_.scala.Unit =
            serviceImpl.getPluginInfo(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_CONFIGURE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[pulumirpc.analyzer.ConfigureAnalyzerRequest, com.google.protobuf.empty.Empty] {
          override def invoke(request: pulumirpc.analyzer.ConfigureAnalyzerRequest, observer: _root_.io.grpc.stub.StreamObserver[com.google.protobuf.empty.Empty]): _root_.scala.Unit =
            serviceImpl.configure(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .build()
  }
  
  /** Analyzer provides a pluggable interface for checking resource definitions against some number of
    * resource policies. It is intentionally open-ended, allowing for implementations that check
    * everything from raw resource definitions to entire projects/stacks/snapshots for arbitrary
    * issues -- style, policy, correctness, security, and so on.
    */
  trait AnalyzerBlockingClient {
    def serviceCompanion = Analyzer
    /** Analyze analyzes a single resource object, and returns any errors that it finds.
      * Called with the "inputs" to the resource, before it is updated.
      */
    def analyze(request: pulumirpc.analyzer.AnalyzeRequest): pulumirpc.analyzer.AnalyzeResponse
    /** AnalyzeStack analyzes all resources within a stack, at the end of a successful
      * preview or update. The provided resources are the "outputs", after any mutations
      * have taken place.
      */
    def analyzeStack(request: pulumirpc.analyzer.AnalyzeStackRequest): pulumirpc.analyzer.AnalyzeResponse
    /** GetAnalyzerInfo returns metadata about the analyzer (e.g., list of policies contained).
      */
    def getAnalyzerInfo(request: com.google.protobuf.empty.Empty): pulumirpc.analyzer.AnalyzerInfo
    /** GetPluginInfo returns generic information about this plugin, like its version.
      */
    def getPluginInfo(request: com.google.protobuf.empty.Empty): pulumirpc.plugin.PluginInfo
    /** Configure configures the analyzer, passing configuration properties for each policy.
      */
    def configure(request: pulumirpc.analyzer.ConfigureAnalyzerRequest): com.google.protobuf.empty.Empty
  }
  
  class AnalyzerBlockingStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[AnalyzerBlockingStub](channel, options) with AnalyzerBlockingClient {
    /** Analyze analyzes a single resource object, and returns any errors that it finds.
      * Called with the "inputs" to the resource, before it is updated.
      */
    override def analyze(request: pulumirpc.analyzer.AnalyzeRequest): pulumirpc.analyzer.AnalyzeResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_ANALYZE, options, request)
    }
    
    /** AnalyzeStack analyzes all resources within a stack, at the end of a successful
      * preview or update. The provided resources are the "outputs", after any mutations
      * have taken place.
      */
    override def analyzeStack(request: pulumirpc.analyzer.AnalyzeStackRequest): pulumirpc.analyzer.AnalyzeResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_ANALYZE_STACK, options, request)
    }
    
    /** GetAnalyzerInfo returns metadata about the analyzer (e.g., list of policies contained).
      */
    override def getAnalyzerInfo(request: com.google.protobuf.empty.Empty): pulumirpc.analyzer.AnalyzerInfo = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GET_ANALYZER_INFO, options, request)
    }
    
    /** GetPluginInfo returns generic information about this plugin, like its version.
      */
    override def getPluginInfo(request: com.google.protobuf.empty.Empty): pulumirpc.plugin.PluginInfo = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GET_PLUGIN_INFO, options, request)
    }
    
    /** Configure configures the analyzer, passing configuration properties for each policy.
      */
    override def configure(request: pulumirpc.analyzer.ConfigureAnalyzerRequest): com.google.protobuf.empty.Empty = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_CONFIGURE, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): AnalyzerBlockingStub = new AnalyzerBlockingStub(channel, options)
  }
  
  class AnalyzerStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[AnalyzerStub](channel, options) with Analyzer {
    /** Analyze analyzes a single resource object, and returns any errors that it finds.
      * Called with the "inputs" to the resource, before it is updated.
      */
    override def analyze(request: pulumirpc.analyzer.AnalyzeRequest): scala.concurrent.Future[pulumirpc.analyzer.AnalyzeResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_ANALYZE, options, request)
    }
    
    /** AnalyzeStack analyzes all resources within a stack, at the end of a successful
      * preview or update. The provided resources are the "outputs", after any mutations
      * have taken place.
      */
    override def analyzeStack(request: pulumirpc.analyzer.AnalyzeStackRequest): scala.concurrent.Future[pulumirpc.analyzer.AnalyzeResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_ANALYZE_STACK, options, request)
    }
    
    /** GetAnalyzerInfo returns metadata about the analyzer (e.g., list of policies contained).
      */
    override def getAnalyzerInfo(request: com.google.protobuf.empty.Empty): scala.concurrent.Future[pulumirpc.analyzer.AnalyzerInfo] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GET_ANALYZER_INFO, options, request)
    }
    
    /** GetPluginInfo returns generic information about this plugin, like its version.
      */
    override def getPluginInfo(request: com.google.protobuf.empty.Empty): scala.concurrent.Future[pulumirpc.plugin.PluginInfo] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GET_PLUGIN_INFO, options, request)
    }
    
    /** Configure configures the analyzer, passing configuration properties for each policy.
      */
    override def configure(request: pulumirpc.analyzer.ConfigureAnalyzerRequest): scala.concurrent.Future[com.google.protobuf.empty.Empty] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_CONFIGURE, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): AnalyzerStub = new AnalyzerStub(channel, options)
  }
  
  object AnalyzerStub extends _root_.io.grpc.stub.AbstractStub.StubFactory[AnalyzerStub] {
    override def newStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): AnalyzerStub = new AnalyzerStub(channel, options)
    
    implicit val stubFactory: _root_.io.grpc.stub.AbstractStub.StubFactory[AnalyzerStub] = this
  }
  
  def bindService(serviceImpl: Analyzer, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition = Analyzer.bindService(serviceImpl, executionContext)
  
  def blockingStub(channel: _root_.io.grpc.Channel): AnalyzerBlockingStub = new AnalyzerBlockingStub(channel)
  
  def stub(channel: _root_.io.grpc.Channel): AnalyzerStub = new AnalyzerStub(channel)
  
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = pulumirpc.analyzer.AnalyzerProto.javaDescriptor.getServices().get(0)
  
}