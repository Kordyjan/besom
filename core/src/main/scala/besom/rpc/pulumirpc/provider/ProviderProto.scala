// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package pulumirpc.provider

object ProviderProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    pulumirpc.plugin.PluginProto,
    com.google.protobuf.empty.EmptyProto,
    com.google.protobuf.struct.StructProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      pulumirpc.provider.GetSchemaRequest,
      pulumirpc.provider.GetSchemaResponse,
      pulumirpc.provider.ConfigureRequest,
      pulumirpc.provider.ConfigureResponse,
      pulumirpc.provider.ConfigureErrorMissingKeys,
      pulumirpc.provider.InvokeRequest,
      pulumirpc.provider.InvokeResponse,
      pulumirpc.provider.CallRequest,
      pulumirpc.provider.CallResponse,
      pulumirpc.provider.CheckRequest,
      pulumirpc.provider.CheckResponse,
      pulumirpc.provider.CheckFailure,
      pulumirpc.provider.DiffRequest,
      pulumirpc.provider.PropertyDiff,
      pulumirpc.provider.DiffResponse,
      pulumirpc.provider.CreateRequest,
      pulumirpc.provider.CreateResponse,
      pulumirpc.provider.ReadRequest,
      pulumirpc.provider.ReadResponse,
      pulumirpc.provider.UpdateRequest,
      pulumirpc.provider.UpdateResponse,
      pulumirpc.provider.DeleteRequest,
      pulumirpc.provider.ConstructRequest,
      pulumirpc.provider.ConstructResponse,
      pulumirpc.provider.ErrorResourceInitFailed
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """Cg5wcm92aWRlci5wcm90bxIJcHVsdW1pcnBjGgxwbHVnaW4ucHJvdG8aG2dvb2dsZS9wcm90b2J1Zi9lbXB0eS5wcm90bxocZ
  29vZ2xlL3Byb3RvYnVmL3N0cnVjdC5wcm90byI6ChBHZXRTY2hlbWFSZXF1ZXN0EiYKB3ZlcnNpb24YASABKAVCDOI/CRIHdmVyc
  2lvblIHdmVyc2lvbiI4ChFHZXRTY2hlbWFSZXNwb25zZRIjCgZzY2hlbWEYASABKAlCC+I/CBIGc2NoZW1hUgZzY2hlbWEi8gIKE
  ENvbmZpZ3VyZVJlcXVlc3QSWAoJdmFyaWFibGVzGAEgAygLMioucHVsdW1pcnBjLkNvbmZpZ3VyZVJlcXVlc3QuVmFyaWFibGVzR
  W50cnlCDuI/CxIJdmFyaWFibGVzUgl2YXJpYWJsZXMSNgoEYXJncxgCIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCCeI/B
  hIEYXJnc1IEYXJncxI4Cg1hY2NlcHRTZWNyZXRzGAMgASgIQhLiPw8SDWFjY2VwdFNlY3JldHNSDWFjY2VwdFNlY3JldHMSPgoPY
  WNjZXB0UmVzb3VyY2VzGAQgASgIQhTiPxESD2FjY2VwdFJlc291cmNlc1IPYWNjZXB0UmVzb3VyY2VzGlIKDlZhcmlhYmxlc0Vud
  HJ5EhoKA2tleRgBIAEoCUII4j8FEgNrZXlSA2tleRIgCgV2YWx1ZRgCIAEoCUIK4j8HEgV2YWx1ZVIFdmFsdWU6AjgBIocCChFDb
  25maWd1cmVSZXNwb25zZRI4Cg1hY2NlcHRTZWNyZXRzGAEgASgIQhLiPw8SDWFjY2VwdFNlY3JldHNSDWFjY2VwdFNlY3JldHMSP
  goPc3VwcG9ydHNQcmV2aWV3GAIgASgIQhTiPxESD3N1cHBvcnRzUHJldmlld1IPc3VwcG9ydHNQcmV2aWV3Ej4KD2FjY2VwdFJlc
  291cmNlcxgDIAEoCEIU4j8REg9hY2NlcHRSZXNvdXJjZXNSD2FjY2VwdFJlc291cmNlcxI4Cg1hY2NlcHRPdXRwdXRzGAQgASgIQ
  hLiPw8SDWFjY2VwdE91dHB1dHNSDWFjY2VwdE91dHB1dHMi4QEKGUNvbmZpZ3VyZUVycm9yTWlzc2luZ0tleXMSYwoLbWlzc2luZ
  0tleXMYASADKAsyLy5wdWx1bWlycGMuQ29uZmlndXJlRXJyb3JNaXNzaW5nS2V5cy5NaXNzaW5nS2V5QhDiPw0SC21pc3NpbmdLZ
  XlzUgttaXNzaW5nS2V5cxpfCgpNaXNzaW5nS2V5Eh0KBG5hbWUYASABKAlCCeI/BhIEbmFtZVIEbmFtZRIyCgtkZXNjcmlwdGlvb
  hgCIAEoCUIQ4j8NEgtkZXNjcmlwdGlvblILZGVzY3JpcHRpb24ioAEKDUludm9rZVJlcXVlc3QSGgoDdG9rGAEgASgJQgjiPwUSA
  3Rva1IDdG9rEjYKBGFyZ3MYAiABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0QgniPwYSBGFyZ3NSBGFyZ3NKBAgDEAdSCHByb
  3ZpZGVyUgd2ZXJzaW9uUg9hY2NlcHRSZXNvdXJjZXNSEXBsdWdpbkRvd25sb2FkVVJMIpIBCg5JbnZva2VSZXNwb25zZRI8CgZyZ
  XR1cm4YASABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0QgviPwgSBnJldHVyblIGcmV0dXJuEkIKCGZhaWx1cmVzGAIgAygLM
  hcucHVsdW1pcnBjLkNoZWNrRmFpbHVyZUIN4j8KEghmYWlsdXJlc1IIZmFpbHVyZXMi3QcKC0NhbGxSZXF1ZXN0EhoKA3RvaxgBI
  AEoCUII4j8FEgN0b2tSA3RvaxI2CgRhcmdzGAIgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdEIJ4j8GEgRhcmdzUgRhcmdzE
  msKD2FyZ0RlcGVuZGVuY2llcxgDIAMoCzIrLnB1bHVtaXJwYy5DYWxsUmVxdWVzdC5BcmdEZXBlbmRlbmNpZXNFbnRyeUIU4j8RE
  g9hcmdEZXBlbmRlbmNpZXNSD2FyZ0RlcGVuZGVuY2llcxIpCghwcm92aWRlchgEIAEoCUIN4j8KEghwcm92aWRlclIIcHJvdmlkZ
  XISJgoHdmVyc2lvbhgFIAEoCUIM4j8JEgd2ZXJzaW9uUgd2ZXJzaW9uEkQKEXBsdWdpbkRvd25sb2FkVVJMGA0gASgJQhbiPxMSE
  XBsdWdpbkRvd25sb2FkVVJMUhFwbHVnaW5Eb3dubG9hZFVSTBImCgdwcm9qZWN0GAYgASgJQgziPwkSB3Byb2plY3RSB3Byb2plY
  3QSIAoFc3RhY2sYByABKAlCCuI/BxIFc3RhY2tSBXN0YWNrEkcKBmNvbmZpZxgIIAMoCzIiLnB1bHVtaXJwYy5DYWxsUmVxdWVzd
  C5Db25maWdFbnRyeUIL4j8IEgZjb25maWdSBmNvbmZpZxJBChBjb25maWdTZWNyZXRLZXlzGAkgAygJQhXiPxISEGNvbmZpZ1NlY
  3JldEtleXNSEGNvbmZpZ1NlY3JldEtleXMSIwoGZHJ5UnVuGAogASgIQgviPwgSBmRyeVJ1blIGZHJ5UnVuEikKCHBhcmFsbGVsG
  AsgASgFQg3iPwoSCHBhcmFsbGVsUghwYXJhbGxlbBI+Cg9tb25pdG9yRW5kcG9pbnQYDCABKAlCFOI/ERIPbW9uaXRvckVuZHBva
  W50Ug9tb25pdG9yRW5kcG9pbnQaNQoUQXJndW1lbnREZXBlbmRlbmNpZXMSHQoEdXJucxgBIAMoCUIJ4j8GEgR1cm5zUgR1cm5zG
  oUBChRBcmdEZXBlbmRlbmNpZXNFbnRyeRIaCgNrZXkYASABKAlCCOI/BRIDa2V5UgNrZXkSTQoFdmFsdWUYAiABKAsyKy5wdWx1b
  WlycGMuQ2FsbFJlcXVlc3QuQXJndW1lbnREZXBlbmRlbmNpZXNCCuI/BxIFdmFsdWVSBXZhbHVlOgI4ARpPCgtDb25maWdFbnRye
  RIaCgNrZXkYASABKAlCCOI/BRIDa2V5UgNrZXkSIAoFdmFsdWUYAiABKAlCCuI/BxIFdmFsdWVSBXZhbHVlOgI4ASLJAwoMQ2Fsb
  FJlc3BvbnNlEjwKBnJldHVybhgBIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCC+I/CBIGcmV0dXJuUgZyZXR1cm4SeAoSc
  mV0dXJuRGVwZW5kZW5jaWVzGAIgAygLMi8ucHVsdW1pcnBjLkNhbGxSZXNwb25zZS5SZXR1cm5EZXBlbmRlbmNpZXNFbnRyeUIX4
  j8UEhJyZXR1cm5EZXBlbmRlbmNpZXNSEnJldHVybkRlcGVuZGVuY2llcxJCCghmYWlsdXJlcxgDIAMoCzIXLnB1bHVtaXJwYy5Da
  GVja0ZhaWx1cmVCDeI/ChIIZmFpbHVyZXNSCGZhaWx1cmVzGjMKElJldHVybkRlcGVuZGVuY2llcxIdCgR1cm5zGAEgAygJQgniP
  wYSBHVybnNSBHVybnMahwEKF1JldHVybkRlcGVuZGVuY2llc0VudHJ5EhoKA2tleRgBIAEoCUII4j8FEgNrZXlSA2tleRJMCgV2Y
  Wx1ZRgCIAEoCzIqLnB1bHVtaXJwYy5DYWxsUmVzcG9uc2UuUmV0dXJuRGVwZW5kZW5jaWVzQgriPwcSBXZhbHVlUgV2YWx1ZToCO
  AEi1wEKDENoZWNrUmVxdWVzdBIaCgN1cm4YASABKAlCCOI/BRIDdXJuUgN1cm4SNgoEb2xkcxgCIAEoCzIXLmdvb2dsZS5wcm90b
  2J1Zi5TdHJ1Y3RCCeI/BhIEb2xkc1IEb2xkcxI2CgRuZXdzGAMgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdEIJ4j8GEgRuZ
  XdzUgRuZXdzEjsKDnNlcXVlbmNlTnVtYmVyGAQgASgFQhPiPxASDnNlcXVlbmNlTnVtYmVyUg5zZXF1ZW5jZU51bWJlciKRAQoNQ
  2hlY2tSZXNwb25zZRI8CgZpbnB1dHMYASABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0QgviPwgSBmlucHV0c1IGaW5wdXRzE
  kIKCGZhaWx1cmVzGAIgAygLMhcucHVsdW1pcnBjLkNoZWNrRmFpbHVyZUIN4j8KEghmYWlsdXJlc1IIZmFpbHVyZXMiXgoMQ2hlY
  2tGYWlsdXJlEikKCHByb3BlcnR5GAEgASgJQg3iPwoSCHByb3BlcnR5Ughwcm9wZXJ0eRIjCgZyZWFzb24YAiABKAlCC+I/CBIGc
  mVhc29uUgZyZWFzb24i7AEKC0RpZmZSZXF1ZXN0EhcKAmlkGAEgASgJQgfiPwQSAmlkUgJpZBIaCgN1cm4YAiABKAlCCOI/BRIDd
  XJuUgN1cm4SNgoEb2xkcxgDIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCCeI/BhIEb2xkc1IEb2xkcxI2CgRuZXdzGAQgA
  SgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdEIJ4j8GEgRuZXdzUgRuZXdzEjgKDWlnbm9yZUNoYW5nZXMYBSADKAlCEuI/DxINa
  Wdub3JlQ2hhbmdlc1INaWdub3JlQ2hhbmdlcyK8AgoMUHJvcGVydHlEaWZmEjsKBGtpbmQYASABKA4yHC5wdWx1bWlycGMuUHJvc
  GVydHlEaWZmLktpbmRCCeI/BhIEa2luZFIEa2luZBIsCglpbnB1dERpZmYYAiABKAhCDuI/CxIJaW5wdXREaWZmUglpbnB1dERpZ
  mYiwAEKBEtpbmQSEQoDQUREEAAaCOI/BRIDQUREEiEKC0FERF9SRVBMQUNFEAEaEOI/DRILQUREX1JFUExBQ0USFwoGREVMRVRFE
  AIaC+I/CBIGREVMRVRFEicKDkRFTEVURV9SRVBMQUNFEAMaE+I/EBIOREVMRVRFX1JFUExBQ0USFwoGVVBEQVRFEAQaC+I/CBIGV
  VBEQVRFEicKDlVQREFURV9SRVBMQUNFEAUaE+I/EBIOVVBEQVRFX1JFUExBQ0UioAUKDERpZmZSZXNwb25zZRIpCghyZXBsYWNlc
  xgBIAMoCUIN4j8KEghyZXBsYWNlc1IIcmVwbGFjZXMSJgoHc3RhYmxlcxgCIAMoCUIM4j8JEgdzdGFibGVzUgdzdGFibGVzEkoKE
  2RlbGV0ZUJlZm9yZVJlcGxhY2UYAyABKAhCGOI/FRITZGVsZXRlQmVmb3JlUmVwbGFjZVITZGVsZXRlQmVmb3JlUmVwbGFjZRJLC
  gdjaGFuZ2VzGAQgASgOMiMucHVsdW1pcnBjLkRpZmZSZXNwb25zZS5EaWZmQ2hhbmdlc0IM4j8JEgdjaGFuZ2VzUgdjaGFuZ2VzE
  iAKBWRpZmZzGAUgAygJQgriPwcSBWRpZmZzUgVkaWZmcxJgCgxkZXRhaWxlZERpZmYYBiADKAsyKS5wdWx1bWlycGMuRGlmZlJlc
  3BvbnNlLkRldGFpbGVkRGlmZkVudHJ5QhHiPw4SDGRldGFpbGVkRGlmZlIMZGV0YWlsZWREaWZmEj4KD2hhc0RldGFpbGVkRGlmZ
  hgHIAEoCEIU4j8REg9oYXNEZXRhaWxlZERpZmZSD2hhc0RldGFpbGVkRGlmZhpuChFEZXRhaWxlZERpZmZFbnRyeRIaCgNrZXkYA
  SABKAlCCOI/BRIDa2V5UgNrZXkSOQoFdmFsdWUYAiABKAsyFy5wdWx1bWlycGMuUHJvcGVydHlEaWZmQgriPwcSBXZhbHVlUgV2Y
  Wx1ZToCOAEicAoLRGlmZkNoYW5nZXMSIwoMRElGRl9VTktOT1dOEAAaEeI/DhIMRElGRl9VTktOT1dOEh0KCURJRkZfTk9ORRABG
  g7iPwsSCURJRkZfTk9ORRIdCglESUZGX1NPTUUQAhoO4j8LEglESUZGX1NPTUUixQEKDUNyZWF0ZVJlcXVlc3QSGgoDdXJuGAEgA
  SgJQgjiPwUSA3VyblIDdXJuEkgKCnByb3BlcnRpZXMYAiABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0Qg/iPwwSCnByb3Blc
  nRpZXNSCnByb3BlcnRpZXMSJgoHdGltZW91dBgDIAEoAUIM4j8JEgd0aW1lb3V0Ugd0aW1lb3V0EiYKB3ByZXZpZXcYBCABKAhCD
  OI/CRIHcHJldmlld1IHcHJldmlldyJzCg5DcmVhdGVSZXNwb25zZRIXCgJpZBgBIAEoCUIH4j8EEgJpZFICaWQSSAoKcHJvcGVyd
  GllcxgCIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCD+I/DBIKcHJvcGVydGllc1IKcHJvcGVydGllcyLKAQoLUmVhZFJlc
  XVlc3QSFwoCaWQYASABKAlCB+I/BBICaWRSAmlkEhoKA3VybhgCIAEoCUII4j8FEgN1cm5SA3VybhJICgpwcm9wZXJ0aWVzGAMgA
  SgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdEIP4j8MEgpwcm9wZXJ0aWVzUgpwcm9wZXJ0aWVzEjwKBmlucHV0cxgEIAEoCzIXL
  mdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCC+I/CBIGaW5wdXRzUgZpbnB1dHMirwEKDFJlYWRSZXNwb25zZRIXCgJpZBgBIAEoCUIH4
  j8EEgJpZFICaWQSSAoKcHJvcGVydGllcxgCIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCD+I/DBIKcHJvcGVydGllc1IKc
  HJvcGVydGllcxI8CgZpbnB1dHMYAyABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0QgviPwgSBmlucHV0c1IGaW5wdXRzIr4CC
  g1VcGRhdGVSZXF1ZXN0EhcKAmlkGAEgASgJQgfiPwQSAmlkUgJpZBIaCgN1cm4YAiABKAlCCOI/BRIDdXJuUgN1cm4SNgoEb2xkc
  xgDIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCCeI/BhIEb2xkc1IEb2xkcxI2CgRuZXdzGAQgASgLMhcuZ29vZ2xlLnByb
  3RvYnVmLlN0cnVjdEIJ4j8GEgRuZXdzUgRuZXdzEiYKB3RpbWVvdXQYBSABKAFCDOI/CRIHdGltZW91dFIHdGltZW91dBI4Cg1pZ
  25vcmVDaGFuZ2VzGAYgAygJQhLiPw8SDWlnbm9yZUNoYW5nZXNSDWlnbm9yZUNoYW5nZXMSJgoHcHJldmlldxgHIAEoCEIM4j8JE
  gdwcmV2aWV3UgdwcmV2aWV3IloKDlVwZGF0ZVJlc3BvbnNlEkgKCnByb3BlcnRpZXMYASABKAsyFy5nb29nbGUucHJvdG9idWYuU
  3RydWN0Qg/iPwwSCnByb3BlcnRpZXNSCnByb3BlcnRpZXMitgEKDURlbGV0ZVJlcXVlc3QSFwoCaWQYASABKAlCB+I/BBICaWRSA
  mlkEhoKA3VybhgCIAEoCUII4j8FEgN1cm5SA3VybhJICgpwcm9wZXJ0aWVzGAMgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjd
  EIP4j8MEgpwcm9wZXJ0aWVzUgpwcm9wZXJ0aWVzEiYKB3RpbWVvdXQYBCABKAFCDOI/CRIHdGltZW91dFIHdGltZW91dCLkCQoQQ
  29uc3RydWN0UmVxdWVzdBImCgdwcm9qZWN0GAEgASgJQgziPwkSB3Byb2plY3RSB3Byb2plY3QSIAoFc3RhY2sYAiABKAlCCuI/B
  xIFc3RhY2tSBXN0YWNrEkwKBmNvbmZpZxgDIAMoCzInLnB1bHVtaXJwYy5Db25zdHJ1Y3RSZXF1ZXN0LkNvbmZpZ0VudHJ5QgviP
  wgSBmNvbmZpZ1IGY29uZmlnEiMKBmRyeVJ1bhgEIAEoCEIL4j8IEgZkcnlSdW5SBmRyeVJ1bhIpCghwYXJhbGxlbBgFIAEoBUIN4
  j8KEghwYXJhbGxlbFIIcGFyYWxsZWwSPgoPbW9uaXRvckVuZHBvaW50GAYgASgJQhTiPxESD21vbml0b3JFbmRwb2ludFIPbW9ua
  XRvckVuZHBvaW50Eh0KBHR5cGUYByABKAlCCeI/BhIEdHlwZVIEdHlwZRIdCgRuYW1lGAggASgJQgniPwYSBG5hbWVSBG5hbWUSI
  woGcGFyZW50GAkgASgJQgviPwgSBnBhcmVudFIGcGFyZW50EjwKBmlucHV0cxgKIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y
  3RCC+I/CBIGaW5wdXRzUgZpbnB1dHMSeAoRaW5wdXREZXBlbmRlbmNpZXMYCyADKAsyMi5wdWx1bWlycGMuQ29uc3RydWN0UmVxd
  WVzdC5JbnB1dERlcGVuZGVuY2llc0VudHJ5QhbiPxMSEWlucHV0RGVwZW5kZW5jaWVzUhFpbnB1dERlcGVuZGVuY2llcxImCgdwc
  m90ZWN0GAwgASgIQgziPwkSB3Byb3RlY3RSB3Byb3RlY3QSWAoJcHJvdmlkZXJzGA0gAygLMioucHVsdW1pcnBjLkNvbnN0cnVjd
  FJlcXVlc3QuUHJvdmlkZXJzRW50cnlCDuI/CxIJcHJvdmlkZXJzUglwcm92aWRlcnMSJgoHYWxpYXNlcxgOIAMoCUIM4j8JEgdhb
  Glhc2VzUgdhbGlhc2VzEjUKDGRlcGVuZGVuY2llcxgPIAMoCUIR4j8OEgxkZXBlbmRlbmNpZXNSDGRlcGVuZGVuY2llcxJBChBjb
  25maWdTZWNyZXRLZXlzGBAgAygJQhXiPxISEGNvbmZpZ1NlY3JldEtleXNSEGNvbmZpZ1NlY3JldEtleXMaNQoUUHJvcGVydHlEZ
  XBlbmRlbmNpZXMSHQoEdXJucxgBIAMoCUIJ4j8GEgR1cm5zUgR1cm5zGk8KC0NvbmZpZ0VudHJ5EhoKA2tleRgBIAEoCUII4j8FE
  gNrZXlSA2tleRIgCgV2YWx1ZRgCIAEoCUIK4j8HEgV2YWx1ZVIFdmFsdWU6AjgBGowBChZJbnB1dERlcGVuZGVuY2llc0VudHJ5E
  hoKA2tleRgBIAEoCUII4j8FEgNrZXlSA2tleRJSCgV2YWx1ZRgCIAEoCzIwLnB1bHVtaXJwYy5Db25zdHJ1Y3RSZXF1ZXN0LlByb
  3BlcnR5RGVwZW5kZW5jaWVzQgriPwcSBXZhbHVlUgV2YWx1ZToCOAEaUgoOUHJvdmlkZXJzRW50cnkSGgoDa2V5GAEgASgJQgjiP
  wUSA2tleVIDa2V5EiAKBXZhbHVlGAIgASgJQgriPwcSBXZhbHVlUgV2YWx1ZToCOAEirAMKEUNvbnN0cnVjdFJlc3BvbnNlEhoKA
  3VybhgBIAEoCUII4j8FEgN1cm5SA3VybhI5CgVzdGF0ZRgCIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RCCuI/BxIFc3Rhd
  GVSBXN0YXRlEnkKEXN0YXRlRGVwZW5kZW5jaWVzGAMgAygLMjMucHVsdW1pcnBjLkNvbnN0cnVjdFJlc3BvbnNlLlN0YXRlRGVwZ
  W5kZW5jaWVzRW50cnlCFuI/ExIRc3RhdGVEZXBlbmRlbmNpZXNSEXN0YXRlRGVwZW5kZW5jaWVzGjUKFFByb3BlcnR5RGVwZW5kZ
  W5jaWVzEh0KBHVybnMYASADKAlCCeI/BhIEdXJuc1IEdXJucxqNAQoWU3RhdGVEZXBlbmRlbmNpZXNFbnRyeRIaCgNrZXkYASABK
  AlCCOI/BRIDa2V5UgNrZXkSUwoFdmFsdWUYAiABKAsyMS5wdWx1bWlycGMuQ29uc3RydWN0UmVzcG9uc2UuUHJvcGVydHlEZXBlb
  mRlbmNpZXNCCuI/BxIFdmFsdWVSBXZhbHVlOgI4ASLiAQoXRXJyb3JSZXNvdXJjZUluaXRGYWlsZWQSFwoCaWQYASABKAlCB+I/B
  BICaWRSAmlkEkgKCnByb3BlcnRpZXMYAiABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0Qg/iPwwSCnByb3BlcnRpZXNSCnByb
  3BlcnRpZXMSJgoHcmVhc29ucxgDIAMoCUIM4j8JEgdyZWFzb25zUgdyZWFzb25zEjwKBmlucHV0cxgEIAEoCzIXLmdvb2dsZS5wc
  m90b2J1Zi5TdHJ1Y3RCC+I/CBIGaW5wdXRzUgZpbnB1dHMy6QgKEFJlc291cmNlUHJvdmlkZXISSAoJR2V0U2NoZW1hEhsucHVsd
  W1pcnBjLkdldFNjaGVtYVJlcXVlc3QaHC5wdWx1bWlycGMuR2V0U2NoZW1hUmVzcG9uc2UiABJCCgtDaGVja0NvbmZpZxIXLnB1b
  HVtaXJwYy5DaGVja1JlcXVlc3QaGC5wdWx1bWlycGMuQ2hlY2tSZXNwb25zZSIAEj8KCkRpZmZDb25maWcSFi5wdWx1bWlycGMuR
  GlmZlJlcXVlc3QaFy5wdWx1bWlycGMuRGlmZlJlc3BvbnNlIgASSAoJQ29uZmlndXJlEhsucHVsdW1pcnBjLkNvbmZpZ3VyZVJlc
  XVlc3QaHC5wdWx1bWlycGMuQ29uZmlndXJlUmVzcG9uc2UiABI/CgZJbnZva2USGC5wdWx1bWlycGMuSW52b2tlUmVxdWVzdBoZL
  nB1bHVtaXJwYy5JbnZva2VSZXNwb25zZSIAEkcKDFN0cmVhbUludm9rZRIYLnB1bHVtaXJwYy5JbnZva2VSZXF1ZXN0GhkucHVsd
  W1pcnBjLkludm9rZVJlc3BvbnNlIgAwARI5CgRDYWxsEhYucHVsdW1pcnBjLkNhbGxSZXF1ZXN0GhcucHVsdW1pcnBjLkNhbGxSZ
  XNwb25zZSIAEjwKBUNoZWNrEhcucHVsdW1pcnBjLkNoZWNrUmVxdWVzdBoYLnB1bHVtaXJwYy5DaGVja1Jlc3BvbnNlIgASOQoER
  GlmZhIWLnB1bHVtaXJwYy5EaWZmUmVxdWVzdBoXLnB1bHVtaXJwYy5EaWZmUmVzcG9uc2UiABI/CgZDcmVhdGUSGC5wdWx1bWlyc
  GMuQ3JlYXRlUmVxdWVzdBoZLnB1bHVtaXJwYy5DcmVhdGVSZXNwb25zZSIAEjkKBFJlYWQSFi5wdWx1bWlycGMuUmVhZFJlcXVlc
  3QaFy5wdWx1bWlycGMuUmVhZFJlc3BvbnNlIgASPwoGVXBkYXRlEhgucHVsdW1pcnBjLlVwZGF0ZVJlcXVlc3QaGS5wdWx1bWlyc
  GMuVXBkYXRlUmVzcG9uc2UiABI8CgZEZWxldGUSGC5wdWx1bWlycGMuRGVsZXRlUmVxdWVzdBoWLmdvb2dsZS5wcm90b2J1Zi5Fb
  XB0eSIAEkgKCUNvbnN0cnVjdBIbLnB1bHVtaXJwYy5Db25zdHJ1Y3RSZXF1ZXN0GhwucHVsdW1pcnBjLkNvbnN0cnVjdFJlc3Bvb
  nNlIgASOgoGQ2FuY2VsEhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASQAoNR2V0UGx1Z
  2luSW5mbxIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRoVLnB1bHVtaXJwYy5QbHVnaW5JbmZvIgASOwoGQXR0YWNoEhcucHVsdW1pc
  nBjLlBsdWdpbkF0dGFjaBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAQjBaLmdpdGh1Yi5jb20vcHVsdW1pL3B1bHVtaS92My9wc
  m90by9nby9wdWx1bWlycGNiBnByb3RvMw=="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      pulumirpc.plugin.PluginProto.javaDescriptor,
      com.google.protobuf.empty.EmptyProto.javaDescriptor,
      com.google.protobuf.struct.StructProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}